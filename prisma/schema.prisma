// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String?
  username   String    @unique
  email      String    @unique
  password   String
  bio        String?
  avatar     String?
  followedBy User[]    @relation("follow")
  following  User[]    @relation("follow")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  photos     Photo[]
  likes      Like[]
  comments   Comment[]
}

model Photo {
  id        Int                @id @default(autoincrement())
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
  file      String
  caption   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  likes     Like[]
  comments  Comment[]
  hashtags  HashtagsOnPhotos[]
}

model Hashtag {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  photos    HashtagsOnPhotos[]
}

model HashtagsOnPhotos {
  photo      Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoId    Int
  hashtag    Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hashtagId  Int
  assignedAt DateTime @default(now())

  @@id([photoId, hashtagId])
}

model Like {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, photoId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId   Int
  userId    Int
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
