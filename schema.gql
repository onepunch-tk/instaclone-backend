# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Hashtag {
  id: Int!
  name: String!
  photos(paginationData: PaginationInput!): [Photo!]
  createdAt: DateTime!
  updatedAt: DateTime!
  totalPhotos: Int!
}

input PaginationInput {
  afterId: Int
  pageSize: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Photo {
  id: Int!
  user: User!
  userId: Int!
  file: String!
  caption: String
  hashtags: [Hashtag!]
  isMine: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: Int
  comments: Int
}

type User {
  id: Int!
  firstName: String!
  lastName: String
  username: String!
  email: String!
  bio: String
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
  followedBy: [User!]
  following: [User!]
  photos(paginationData: PaginationInput!): [Photo!]
  isMe: Boolean
  isFollowing: Boolean
}

type Error {
  message: String!
}

type UserResponse {
  errors: Error
  data: User
}

type EditProfileResponse {
  errors: Error
  data: User
}

type UserListResponse {
  errors: Error
  data: [User!]
}

type Token {
  token: String
}

type SignInResponse {
  errors: Error
  data: Token
}

type Success {
  success: Boolean
}

type FollowResponse {
  errors: Error
  data: Success
}

type Follow {
  id: Int!
  followedBy: [User!]
  following: [User!]
  followedByCount: Int
  followingCount: Int
  isMe: Boolean!
}

type GetFollowResponse {
  errors: Error
  data: Follow
}

type SignedUrl {
  signedUrl: String!
}

type SignedUrlResponse {
  errors: Error
  data: SignedUrl
}

type PhotoResponse {
  errors: Error
  data: Photo
}

type PhotoListResponse {
  errors: Error
  data: [Photo!]
}

type PhotoLikesUserListResponse {
  errors: Error
  data: [PickObjectType!]
}

type PickObjectType {
  id: Int!
  username: String!
  avatar: String
}

type HashtagResponse {
  errors: Error
  data: Hashtag
}

type LikeOnPhotoResponse {
  errors: Error
  data: Success
}

type Comment {
  id: Int!
  userId: Int!
  payload: String!
  createdAt: DateTime!
  isMine: Boolean
  updatedAt: DateTime!
}

type CreateCommentResponse {
  errors: Error
  data: Success
}

type GetCommentsResponse {
  errors: Error
  data: [Comment!]
}

type Query {
  getProfile(getUserData: GetUserInput!): UserResponse!
  getUserList(userListData: GetUserListInput!): UserListResponse!
  getFollow(getFollowData: GetFollowInput!): GetFollowResponse!
  getSignedUrl(signedUrlData: SignedUrlInput!): SignedUrlResponse!
  getPhotoById(getPhotoData: GetPhotoInput!): PhotoResponse!
  getPhotoLikesUsers(getPhotoData: GetPhotoInput!): PhotoLikesUserListResponse!
  getPhotosByKeyword(photoListData: GetPhotoListInput!): PhotoListResponse!
  getFeeds(paginationData: PaginationInput!): PhotoListResponse!
  getHashtag(getHashtagData: GetHashtagInput!): HashtagResponse!
  getCommentsByPhotoId(getCommentsData: GetCommentsInput!): GetCommentsResponse!
}

input GetUserInput {
  username: String!
}

input GetUserListInput {
  afterId: Int
  pageSize: Int!
  keyword: String!
}

input GetFollowInput {
  afterId: Int
  pageSize: Int!
  username: String!
  role: FollowRole! = ALL_FOLLOW
}

enum FollowRole {
  FOLLOWED_BY
  FOLLOWING
  ALL_FOLLOW
  UN_FOLLOW
}

input SignedUrlInput {
  fileName: String!
  contentType: String!
  fileSize: Int!
}

input GetPhotoInput {
  id: Int!
}

input GetPhotoListInput {
  afterId: Int
  pageSize: Int!
  keyword: String!
}

input GetHashtagInput {
  name: String!
}

input GetCommentsInput {
  afterId: Int
  pageSize: Int!
  photoId: Int!
}

type Mutation {
  signIn(signInData: SignInInput!): SignInResponse!
  createAccount(createAccountData: CreateAccountInput!): UserResponse!
  editProfile(editProfileData: EditProfileInput!): EditProfileResponse!
  follow(followData: FollowInput!): FollowResponse!
  editPhoto(editPhotoData: EditPhotoInput!): PhotoResponse!
  uploadPhoto(uploadPhotoData: UploadPhotoInput!): PhotoResponse!
  likeOnPhoto(likeOnPhotoData: LikeOnPhotoInput!): LikeOnPhotoResponse!
  createComment(createCommentData: CreateCommentInput!): CreateCommentResponse!
}

input SignInInput {
  username: String!
  password: String!
}

input CreateAccountInput {
  firstName: String!
  lastName: String
  username: String!
  email: String!
  bio: String
  password: String!
}

input EditProfileInput {
  firstName: String
  lastName: String
  username: String
  email: String
  bio: String
  password: String
  avatar: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FollowInput {
  username: String!
  role: FollowRole!
}

input EditPhotoInput {
  id: Int!
  caption: String!
}

input UploadPhotoInput {
  file: Upload!
  caption: String
}

input LikeOnPhotoInput {
  id: Int!
}

input CreateCommentInput {
  payload: String!
  photoId: Int!
}